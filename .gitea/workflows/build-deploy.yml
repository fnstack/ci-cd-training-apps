name: Build and Package .NET API

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  DOTNET_VERSION: '9.0.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Test
      run: dotnet test --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/
          **/coverage.cobertura.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build and publish
      run: dotnet publish src/UserApi.Api/UserApi.Api.csproj -c Release -o ./publish
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: ./publish/

  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build Docker image
      run: |
        docker build -t dotnet-api:${{ github.sha }} .
        docker tag dotnet-api:${{ github.sha }} dotnet-api:latest
        
    - name: Test Docker image
      run: |
        docker run -d --name test-api -p 8080:8080 -e ASPNETCORE_HTTP_PORTS=8080 dotnet-api:${{ github.sha }}
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/ || exit 1
        curl -f http://localhost:8080/api/users || exit 1
        docker stop test-api
        docker rm test-api
        
    - name: Save Docker image
      run: |
        docker save dotnet-api:${{ github.sha }} | gzip > dotnet-api-${{ github.sha }}.tar.gz
        
    - name: Upload Docker image
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: dotnet-api-${{ github.sha }}.tar.gz